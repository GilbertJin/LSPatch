name: Android CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    env:
      CCACHE_COMPILERCHECK: '%compiler% -dumpmachine; %compiler% -dumpversion'
      CCACHE_NOHASHDIR: 'true'
      CCACHE_HARDLINK: 'true'
      CCACHE_BASEDIR: '${{ github.workspace }}'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      continue-on-error: true
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Initialize Submodules
      run: git submodule update --init --recursive --no-fetch --checkout
      continue-on-error: true

    - name: Patch bad submodules
      run: |
        file_path="./core/external/fmt/CMakeLists.txt"
        file_content=$(<"$file_path")
        updated_content=$(echo "$file_content" | sed 's/option(FMT_INSTALL "Generate the install target." ON)/option(FMT_INSTALL "Generate the install target." ${FMT_MASTER_PROJECT})/')
        updated_content=$(echo "$updated_content" | sed 's/cxx_std_11/cxx_variadic_templates/g')
        echo "$updated_content" > "$file_path"
        cd ./core/external/lsplant/
        git rm --cached "test/src/main/jni/external/lsparself"
        git rm --cached "test/src/main/jni/external/lsprism"
        git submodule update --init --recursive --no-fetch --checkout
        cd ./lsplant/src/main/jni/external/dex_builder/
        git checkout `git rev-parse HEAD`
        git submodule update --init --recursive --no-fetch --checkout
        cd ./external/parallel_hashmap/parallel_hashmap/

    - name: Write key
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
      run: |
        if [ ! -z "${{ secrets.KEY_STORE }}" ]; then
          echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
          echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
          echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
          echo androidStoreFile='key.jks' >> gradle.properties
          echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
        fi

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true

    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 2G
        key: ${{ runner.os }}
        restore-keys: ${{ runner.os }}
        save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master
      with:
        version: 1.12.0

    - name: Remove Android SDK's CMake
      shell: bash
      run: rm -rf $ANDROID_HOME/cmake

    - name: Build dependencies
      working-directory: libxposed
      run: |
        cd api
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        ./gradlew :api:publishApiPublicationToMavenLocal
        cd ../service
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        ./gradlew :interface:publishInterfacePublicationToMavenLocal

    - name: Build with Gradle
      run: |
        echo 'org.gradle.parallel=true' >> gradle.properties
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        echo 'android.native.buildOutput=verbose' >> gradle.properties
        ./gradlew buildAll

    - name: Upload Debug artifact
      uses: actions/upload-artifact@v4
      with:
        name: lspatch-debug
        path: out/debug/*

    - name: Upload Release artifact
      uses: actions/upload-artifact@v4
      with:
        name: lspatch-release
        path: out/release/*

    - name: Upload mappings
      uses: actions/upload-artifact@v4
      with:
        name: mappings
        path: |
          patch-loader/build/outputs/mapping
          manager/build/outputs/mapping

    - name: Upload symbols
      uses: actions/upload-artifact@v4
      with:
        name: symbols
        path: |
          patch-loader/build/symbols

    - name: Post to releases
      if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/master' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v0.6" --generate-notes --draft `ls out/debug/* ` `ls out/release/*`
